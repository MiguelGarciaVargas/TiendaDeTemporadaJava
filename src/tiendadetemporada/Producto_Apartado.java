/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tiendadetemporada;

import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;

/**
 *
 * @author migue
 */
public class Producto_Apartado extends javax.swing.JFrame {

    private long idApartado;
    private boolean sePuedeModificar;
    private Map<String, Long> mapProductos = new HashMap<>();
    private int selectedProductoId = -1;
    private int cantidadAnterior = -1;
    private long productoSeleccionado = -1;
    private Map<Long, String> idToComboText = new HashMap<>();

    /**
     * Creates new form Producto_Apartado
     */
    public Producto_Apartado(long idApartado, boolean esModificable) {
        initComponents();
        this.idApartado = idApartado;
        this.sePuedeModificar = esModificable;
        cargarLabelApartadoInfo();
        cargarTablaProductoApartado();
        bloquearBotonesSiNoModificable();
    }

    private void cargarLabelApartadoInfo() {
        try (Connection con = Conexion.conectar()) {
            String sql = """
            SELECT a.id_apartado, c.nombre_cliente, a.fecha_vencimiento
            FROM VentasInfo.Apartado a
            INNER JOIN ClientesInfo.Tarjeta_Cliente tc ON a.id_tarjeta_cliente = tc.id_tarjeta_cliente
            INNER JOIN ClientesInfo.Cliente c ON tc.id_cliente = c.id_cliente
            WHERE a.id_apartado = ?
        """;

            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, idApartado);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String nombre = rs.getString("nombre_cliente");
                Date fecha = rs.getDate("fecha_vencimiento");

                String texto = idApartado
                        + " - " + nombre
                        + " [" + fecha + "]";
                jLabelApartadoId.setText(texto);
            } else {
                jLabelApartadoId.setText("Informaci√≥n del apartado no encontrada.");
            }

            rs.close();
        } catch (Exception e) {
            jLabelApartadoId.setText("Error al cargar datos del apartado.");
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButtonEliminar = new javax.swing.JButton();
        jButtonRegresar = new javax.swing.JButton();
        jButtonAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableApartado = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxProducto = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jSpinnerCantidad = new javax.swing.JSpinner();
        jLabelApartadoId = new javax.swing.JLabel();
        jButtonEditar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("Cantidad:");

        jButtonEliminar.setBackground(new java.awt.Color(0, 102, 255));
        jButtonEliminar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonRegresar.setBackground(new java.awt.Color(0, 102, 255));
        jButtonRegresar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonRegresar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRegresar.setText("Regresar");
        jButtonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegresarActionPerformed(evt);
            }
        });

        jButtonAgregar.setBackground(new java.awt.Color(0, 102, 255));
        jButtonAgregar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonAgregar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAgregar.setText("Agregar");
        jButtonAgregar.setName(""); // NOI18N
        jButtonAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAgregarMouseClicked(evt);
            }
        });
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        TableApartado.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        TableApartado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Producto - Temporada", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableApartado.setColumnSelectionAllowed(true);
        TableApartado.setGridColor(new java.awt.Color(255, 255, 255));
        TableApartado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableApartadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableApartado);
        TableApartado.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (TableApartado.getColumnModel().getColumnCount() > 0) {
            TableApartado.getColumnModel().getColumn(0).setMinWidth(60);
            TableApartado.getColumnModel().getColumn(0).setPreferredWidth(60);
            TableApartado.getColumnModel().getColumn(0).setMaxWidth(60);
        }

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 255));
        jLabel6.setText("Apartado:");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 38)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Producto - Apartado");
        jLabel1.setToolTipText("");

        jComboBoxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProductoActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 255));
        jLabel7.setText("Producto:");

        jSpinnerCantidad.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N

        jLabelApartadoId.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabelApartadoId.setForeground(new java.awt.Color(0, 102, 255));
        jLabelApartadoId.setText("_");

        jButtonEditar1.setBackground(new java.awt.Color(0, 102, 255));
        jButtonEditar1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonEditar1.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEditar1.setText("Editar");
        jButtonEditar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(367, 367, 367)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(jButtonEditar1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133)
                        .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelApartadoId))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabelApartadoId))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEditar1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int fila = TableApartado.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Selecciona una fila.");
            return;
        }

        long idProducto = (long) TableApartado.getValueAt(fila, 0);

        try {
            Connection con = Conexion.conectar();
            String sql = "DELETE FROM VentasInfo.Producto_Apartado WHERE id_apartado = ? AND id_producto = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, idApartado);
            ps.setLong(2, idProducto);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Producto eliminado.");
            ps.close();
            con.close();
            cargarTablaProductoApartado();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al eliminar: ");
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegresarActionPerformed
        Apartado ventanaApartado = new Apartado();
        ventanaApartado.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonRegresarActionPerformed

    private void jButtonAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAgregarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAgregarMouseClicked

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        String seleccion = (String) jComboBoxProducto.getSelectedItem();
        if (seleccion == null || !mapProductos.containsKey(seleccion)) {
            JOptionPane.showMessageDialog(null, "Selecciona un producto v√°lido.");
            return;
        }

        long idProducto = mapProductos.get(seleccion);
        int cantidad = (int) jSpinnerCantidad.getValue();

        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a 0.");
            return;
        }

        try {
            Connection con = Conexion.conectar();
            String precioQuery = "SELECT precio_producto, existencias FROM ProductoInfo.Producto WHERE id_producto = ?";
            PreparedStatement psPrecio = con.prepareStatement(precioQuery);
            psPrecio.setLong(1, idProducto);
            ResultSet rs = psPrecio.executeQuery();
            if (rs.next()) {
                float precio = rs.getFloat("precio_producto");
                int existencias = rs.getInt("existencias");
                if (cantidad > existencias) {
                    JOptionPane.showMessageDialog(null, "No hay suficientes existencias.");
                    return;
                }
                float subtotal = precio * cantidad;
                String insert = "INSERT INTO VentasInfo.Producto_Apartado(id_producto, id_apartado, cantidad, subtotal_apartado) "
                        + "VALUES (?, ?, ?, ?)";
                PreparedStatement ps = con.prepareStatement(insert);
                ps.setLong(1, idProducto);
                ps.setLong(2, idApartado);
                ps.setInt(3, cantidad);
                ps.setFloat(4, subtotal);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Producto agregado correctamente.");
                ps.close();
                cargarTablaProductoApartado();
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al agregar producto: ");
        }
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void TableApartadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableApartadoMouseClicked
        int fila = TableApartado.getSelectedRow();
        if (fila >= 0) {
            selectedProductoId = Integer.parseInt(TableApartado.getValueAt(fila, 0).toString());
            cantidadAnterior = Integer.parseInt(TableApartado.getValueAt(fila, 2).toString());
            productoSeleccionado = selectedProductoId;

            // Usa el ID para buscar el texto del combo
            String textoCombo = idToComboText.get((long) selectedProductoId);
            if (textoCombo != null) {
                jComboBoxProducto.setSelectedItem(textoCombo);
            } else {
                jComboBoxProducto.setSelectedIndex(-1);
            }

            jSpinnerCantidad.setValue(cantidadAnterior);
        }
    }//GEN-LAST:event_TableApartadoMouseClicked

    private void jComboBoxProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxProductoActionPerformed

    private void jButtonEditar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditar1ActionPerformed
        if (selectedProductoId == -1) {
            JOptionPane.showMessageDialog(null, "Selecciona un producto de la tabla.");
            return;
        }

        String seleccion = (String) jComboBoxProducto.getSelectedItem();
        if (seleccion == null || !mapProductos.containsKey(seleccion)) {
            JOptionPane.showMessageDialog(null, "Selecciona un producto v√°lido.");
            return;
        }

        long nuevoId = mapProductos.get(seleccion);
        int nuevaCantidad = (int) jSpinnerCantidad.getValue();

        if (nuevaCantidad <= 0) {
            JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a 0.");
            return;
        }

        try {
            Connection con = Conexion.conectar();
            String sqlPrecio = "SELECT existencias, precio_producto FROM ProductoInfo.Producto WHERE id_producto = ?";
            PreparedStatement ps = con.prepareStatement(sqlPrecio);
            ps.setLong(1, nuevoId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int existencias = rs.getInt("existencias");
                float precio = rs.getFloat("precio_producto");

                int disponibles = existencias + (nuevoId == selectedProductoId ? cantidadAnterior : 0);

                if (nuevaCantidad > disponibles) {
                    JOptionPane.showMessageDialog(null, "No hay suficientes existencias.");
                    return;
                }

                float subtotal = precio * nuevaCantidad;

                String update = "UPDATE VentasInfo.Producto_Apartado "
                        + "SET id_producto = ?, cantidad = ?, subtotal_apartado = ? "
                        + "WHERE id_apartado = ? AND id_producto = ?";
                ps = con.prepareStatement(update);
                ps.setLong(1, nuevoId);
                ps.setInt(2, nuevaCantidad);
                ps.setFloat(3, subtotal);
                ps.setLong(4, idApartado);
                ps.setLong(5, selectedProductoId);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Producto actualizado.");
                cargarTablaProductoApartado();
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar: ");
        }
    }//GEN-LAST:event_jButtonEditar1ActionPerformed

    private void bloquearBotonesSiNoModificable() {
        jButtonAgregar.setVisible(sePuedeModificar);
        jButtonRegresar.setVisible(sePuedeModificar);
        jButtonEliminar.setVisible(sePuedeModificar);
        jComboBoxProducto.setEnabled(sePuedeModificar);
        jSpinnerCantidad.setEnabled(sePuedeModificar);
    }

    private void cargarComboProductos() {
        mapProductos.clear();
        idToComboText.clear(); // <--- nuevo
        jComboBoxProducto.removeAllItems();

        try {
            Connection con = Conexion.conectar();
            String sql = "SELECT p.id_producto, CONCAT(p.id_producto, ' - ', p.nombre_producto, ' (', t.nombre, ')') AS texto "
                    + "FROM ProductoInfo.Producto_Temporada pt "
                    + "JOIN ProductoInfo.Producto p ON pt.id_producto = p.id_producto "
                    + "JOIN ProductoInfo.Temporada t ON pt.id_temporada = t.id_temporada";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                long id = rs.getLong("id_producto");
                String texto = rs.getString("texto");

                jComboBoxProducto.addItem(texto);
                mapProductos.put(texto, id);
                idToComboText.put(id, texto); // ‚Üê ¬°aqu√≠ est√° la clave!
            }

            jComboBoxProducto.setSelectedIndex(-1);
            rs.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar productos: " + e.getMessage());
        }
    }

    private void cargarTablaProductoApartado() {
        cargarComboProductos();

        try (Connection con = Conexion.conectar()) {
            String sql = """
            SELECT pa.id_producto,
                   CONCAT(pt.id_producto_temporada, ' - ', p.nombre_producto, ' (', t.nombre, ')') AS producto,
                   pa.cantidad
            FROM VentasInfo.Producto_Apartado pa
            JOIN ProductoInfo.Producto p ON pa.id_producto = p.id_producto
            JOIN ProductoInfo.Producto_Temporada pt ON p.id_producto = pt.id_producto
            JOIN ProductoInfo.Temporada t ON pt.id_temporada = t.id_temporada
            WHERE pa.id_apartado = ?
        """;

            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, idApartado);
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = (DefaultTableModel) TableApartado.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                Object[] fila = {
                    rs.getLong("id_producto"),
                    rs.getString("producto"),
                    rs.getInt("cantidad")
                };
                model.addRow(fila);
            }

            rs.close();
            selectedProductoId = -1;
            productoSeleccionado = -1;
            jComboBoxProducto.setSelectedIndex(-1);
            jSpinnerCantidad.setValue(1);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar productos del apartado:\n" + e.getMessage());
            e.printStackTrace();
        }
    }

    private float obtenerPrecioSiHayStock(long idProducto, int cantidad) {
        try (Connection con = Conexion.conectar()) {
            String sql = "SELECT existencias, precio_producto FROM ProductoInfo.Producto WHERE id_producto = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, idProducto);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int stock = rs.getInt("existencias");
                float precio = rs.getFloat("precio_producto");
                if (cantidad <= stock) {
                    return precio;
                } else {
                    JOptionPane.showMessageDialog(null, "No hay suficientes existencias.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al consultar existencias");
        }
        return -1;
    }

    private float validarExistenciasParaActualizar(long nuevoId, int nuevaCantidad) {
        try (Connection con = Conexion.conectar()) {
            String sql = "SELECT existencias, precio_producto FROM ProductoInfo.Producto WHERE id_producto = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setLong(1, nuevoId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int stock = rs.getInt("existencias");
                float precio = rs.getFloat("precio_producto");

                int disponible = stock;
                if (nuevoId == productoSeleccionado) {
                    disponible += cantidadAnterior;
                }

                if (nuevaCantidad <= disponible) {
                    return precio;
                } else {
                    JOptionPane.showMessageDialog(null, "No hay existencias suficientes.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al validar existencias (actualizaci√≥n)");
        }
        return -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Producto_Apartado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Producto_Apartado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Producto_Apartado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Producto_Apartado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new Producto_Apartado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableApartado;
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonEditar1;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonRegresar;
    private javax.swing.JComboBox<String> jComboBoxProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelApartadoId;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerCantidad;
    // End of variables declaration//GEN-END:variables
}
